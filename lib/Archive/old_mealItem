
  void calculateTotalKcal() {
    //int total = widget.meals.fold(0, (sum, meal) => sum + meal.kcal);
    int total = 2000;
    totalkcal.value = total; //triggers the rebuild with the value notifier
    setState(() {
      // needed to rebuild the CircularPaint widget
    });
  }

  void updateBreakfast(int newBreakfastkcal) {
    breakfastkcal = newBreakfastkcal;
    calculateTotalKcal();
  }

  void updateLunchkcal(int newLunchkcal) {
    breakfastkcal = newLunchkcal;
    calculateTotalKcal();
  }

  void updateDinnerkcal(int newDinnerkcal) {
    breakfastkcal = newDinnerkcal;
    calculateTotalKcal();
  }

  void updateSnackkcal(int newSnackkcal) {
    breakfastkcal = newSnackkcal;
    calculateTotalKcal();
  }

// ignore: must_be_immutable
class MealElement extends StatefulWidget {
  final String name;
  int kcal;
  MealElement({super.key, required this.name, required this.kcal});

  @override
  State<MealElement> createState() => _MealElementState();
}

class _MealElementState extends State<MealElement> {
  @override
  Widget build(BuildContext context) {
    return Material(
      elevation: 4,
      clipBehavior: Clip.hardEdge,
      borderRadius: BorderRadius.circular(10),
      child: Container(
        constraints: const BoxConstraints(minHeight: 40, maxWidth: 500),
        //height: 200,
        width: MediaQuery.of(context).size.width - 120,
        child: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                //const Icon(Icons.ac_unit_sharp),
                const SizedBox(
                  width: 15,
                ),
                Text(
                  widget.name,
                  style: Theme.of(context).textTheme.bodyMedium,
                ),
                const Spacer(),
                IconButton(
                  icon: const Icon(Icons.add),
                  onPressed: () async {
                    var data = await Navigator.push<int?>(
                      context,
                      MaterialPageRoute<int?>(
                        builder: (BuildContext context) {
                          return AddDiaryEntry(
                            mealname: widget.name,
                          );
                        },
                      ),
                    );

                    /*var data = await showDialog(
                        context: context,
                        builder: (BuildContext context) => AddDiaryEntry(
                              mealname: widget.name,
                            ));*/
                    if (data != null) {
                      int newKcal = data;
                      widget.kcal = newKcal;
                      (context as Element).markNeedsBuild();
                      _DiaryPageState? diaryState =
                          context.findAncestorStateOfType<_DiaryPageState>();
                      //diaryState?.updateTotalKcal(newKcal);
                      if (widget.name == 'Morgenmad') {
                        diaryState?.updateBreakfast(newKcal);
                      } else if (widget.name == 'Frokost') {
                        diaryState?.updateLunchkcal(newKcal);
                      } else if (widget.name == 'Aftensmad') {
                        diaryState?.updateDinnerkcal(newKcal);
                      } else if (widget.name == 'Snacks') {
                        diaryState?.updateSnackkcal(newKcal);
                      }
                    }
                  },
                )
              ],
            ),
            if (widget.kcal != 0)
              Column(
                children: [
                  const Divider(
                    indent: 10.0,
                    endIndent: 10.0,
                    thickness: 0.4,
                    color: Colors.black,
                  ),
                  Text(widget.kcal.toString()),
                  const SizedBox(
                    height: 10,
                  )
                ],
              ),
          ],
        ),
      ),
    );
  }
}
